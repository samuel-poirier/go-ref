{
    "swagger": "2.0",
    "info": {
        "description": "Example consumer API",
        "title": "Go PubSub Demo Consumer API",
        "contact": {
            "url": "https://github.com/samuel-poirier/go-ref"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/samuel-poirier/go-ref/blob/main/LICENSE"
        },
        "version": "1.0"
    },
    "host": "localhost:8081",
    "basePath": "/",
    "paths": {
        "/api/v1/hc": {
            "get": {
                "description": "Returns ok if healthy",
                "produces": [
                    "application/json"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/api/v1/items/processed": {
            "get": {
                "description": "Returns top 100 last processed items",
                "produces": [
                    "application/json"
                ],
                "summary": "Endpoint to get processed items",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of items to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_samuel-poirier_go-ref_consumer_internal_repository.ProcessedItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorModel"
                        }
                    }
                }
            }
        },
        "/api/v1/items/processed/count": {
            "get": {
                "description": "Returns count of all processed items",
                "produces": [
                    "application/json"
                ],
                "summary": "Endpoint to count processed items",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorModel"
                        }
                    }
                }
            }
        },
        "/api/v1/items/processed/{id}": {
            "get": {
                "description": "Returns the processed item found by id",
                "produces": [
                    "application/json"
                ],
                "summary": "Endpoint get one processed item by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_samuel-poirier_go-ref_consumer_internal_repository.ProcessedItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorModel"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_samuel-poirier_go-ref_consumer_internal_repository.ProcessedItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "processedAt": {
                    "type": "string"
                },
                "processedData": {
                    "type": "string"
                }
            }
        },
        "response.ErrorDetail": {
            "type": "object",
            "properties": {
                "location": {
                    "description": "Location is a path-like string indicating where the error occurred.\nIt typically begins with `path`, `query`, `header`, or `body`. Example:\n`body.items[3].tags` or `path.thing-id`.",
                    "type": "string"
                },
                "message": {
                    "description": "Message is a human-readable explanation of the error.",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value at the given location, echoed back to the client\nto help with debugging. This can be useful for e.g. validating that\nthe client didn't send extra whitespace or help when the client\ndid not log an outgoing request."
                }
            }
        },
        "response.ErrorModel": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "Detail is an explanation specific to this error occurrence.",
                    "type": "string",
                    "example": "Property foo is required but is missing."
                },
                "errors": {
                    "description": "Errors provides an optional mechanism of passing additional error details\nas a list.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.ErrorDetail"
                    }
                },
                "instance": {
                    "description": "Instance is a URI to get more info about this error occurrence.",
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/error-log/abc123"
                },
                "status": {
                    "description": "Status provides the HTTP status code for client convenience. Response will\ndefault this to the response status code if unset. This SHOULD match the\nresponse status code (though proxies may modify the actual status code).",
                    "type": "integer",
                    "example": 400
                },
                "title": {
                    "description": "Title provides a short static summary of the problem. Response will default this\nto the HTTP response status code text if not present.",
                    "type": "string",
                    "example": "Bad Request"
                },
                "type": {
                    "description": "Type is a URI to get more information about the error type.",
                    "type": "string",
                    "format": "uri",
                    "default": "about:blank",
                    "example": "https://example.com/errors/example"
                }
            }
        }
    }
}
