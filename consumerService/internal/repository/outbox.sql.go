// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: outbox.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOutboxMessage = `-- name: CreateOutboxMessage :exec
INSERT INTO outbox (
    id,
    created_at,
    scheduled_at,
    metadata,
    payload,
    times_attempted
) VALUES ($1, now(), $2, $3, $4, 0)
`

type CreateOutboxMessageParams struct {
	ID          uuid.UUID
	ScheduledAt time.Time
	Metadata    []byte
	Payload     []byte
}

func (q *Queries) CreateOutboxMessage(ctx context.Context, arg CreateOutboxMessageParams) error {
	_, err := q.db.Exec(ctx, createOutboxMessage,
		arg.ID,
		arg.ScheduledAt,
		arg.Metadata,
		arg.Payload,
	)
	return err
}

const deleteOutboxMessageById = `-- name: DeleteOutboxMessageById :exec
DELETE from outbox where id = $1
`

func (q *Queries) DeleteOutboxMessageById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOutboxMessageById, id)
	return err
}

const findFirstOutboxMessageByScheduledTime = `-- name: FindFirstOutboxMessageByScheduledTime :one
SELECT id, created_at, scheduled_at, metadata, payload, times_attempted from outbox
ORDER BY scheduled_at
OFFSET 0
LIMIT 1
`

func (q *Queries) FindFirstOutboxMessageByScheduledTime(ctx context.Context) (Outbox, error) {
	row := q.db.QueryRow(ctx, findFirstOutboxMessageByScheduledTime)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ScheduledAt,
		&i.Metadata,
		&i.Payload,
		&i.TimesAttempted,
	)
	return i, err
}

const incrementOutboxMessageTimesAttemptedById = `-- name: IncrementOutboxMessageTimesAttemptedById :exec
UPDATE outbox set times_attempted = times_attempted + 1
where id = $1
`

func (q *Queries) IncrementOutboxMessageTimesAttemptedById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementOutboxMessageTimesAttemptedById, id)
	return err
}
