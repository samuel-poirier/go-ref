// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: processedItems.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countAllProcessedItems = `-- name: CountAllProcessedItems :one
SELECT COUNT(*) FROM processed_items
`

func (q *Queries) CountAllProcessedItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllProcessedItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProcessedItem = `-- name: CreateProcessedItem :exec
INSERT INTO processed_items (processed_data, processed_at) VALUES ($1::VARCHAR(255), now())
`

func (q *Queries) CreateProcessedItem(ctx context.Context, processedData string) error {
	_, err := q.db.Exec(ctx, createProcessedItem, processedData)
	return err
}

const findLastProcessedItem = `-- name: FindLastProcessedItem :one
SELECT id, processed_at, processed_data from processed_items order by processed_at desc limit 1
`

func (q *Queries) FindLastProcessedItem(ctx context.Context) (ProcessedItem, error) {
	row := q.db.QueryRow(ctx, findLastProcessedItem)
	var i ProcessedItem
	err := row.Scan(&i.ID, &i.ProcessedAt, &i.ProcessedData)
	return i, err
}

const findProcessedItemById = `-- name: FindProcessedItemById :one
SELECT id, processed_at, processed_data from processed_items WHERE id = $1
`

func (q *Queries) FindProcessedItemById(ctx context.Context, id uuid.UUID) (ProcessedItem, error) {
	row := q.db.QueryRow(ctx, findProcessedItemById, id)
	var i ProcessedItem
	err := row.Scan(&i.ID, &i.ProcessedAt, &i.ProcessedData)
	return i, err
}

const findProcessedItemsWithPaging = `-- name: FindProcessedItemsWithPaging :many
SELECT id, processed_at, processed_data from processed_items
order by processed_at
OFFSET $1
LIMIT $2
`

type FindProcessedItemsWithPagingParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) FindProcessedItemsWithPaging(ctx context.Context, arg FindProcessedItemsWithPagingParams) ([]ProcessedItem, error) {
	rows, err := q.db.Query(ctx, findProcessedItemsWithPaging, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessedItem
	for rows.Next() {
		var i ProcessedItem
		if err := rows.Scan(&i.ID, &i.ProcessedAt, &i.ProcessedData); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
